import json
import os
import urllib.parse
from datetime import datetime, timedelta
from xml.etree.ElementTree import Element, SubElement, ElementTree, parse, register_namespace
import yaml
import re
import logging
import argparse

# Setup logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# Register namespaces
namespaces = {
    'atom': 'http://www.w3.org/2005/Atom'
}

for prefix, uri in namespaces.items():
    register_namespace(prefix, uri)

def load_config(config_file='config.yaml'):
    """Load configuration from a YAML file."""
    try:
        with open(config_file, 'r') as file:
            return yaml.safe_load(file)
    except FileNotFoundError:
        logging.error(f"Configuration file '{config_file}' not found.")
        exit(1)

def sanitize_for_xml(tag):
    """Sanitize string to be used as an XML tag."""
    return re.sub(r'[^a-zA-Z0-9]', '_', tag)

def escape_xml_chars(text):
    """Escape special characters for XML content."""
    return text.replace('&', '&amp;').replace('<', '&lt;').replace('>', '&gt;')

def read_json_files(directory):
    """Read and load JSON files from the specified directory."""
    json_data = []
    for filename in os.listdir(directory):
        if filename.endswith('_rewritten.json'):
            filepath = os.path.join(directory, filename)
            try:
                with open(filepath, 'r', encoding='utf-8') as file:
                    data = json.load(file)
                    json_data.append(data)
            except json.JSONDecodeError as e:
                logging.error(f"Error decoding JSON from file {filename}: {e}")
    return json_data

def create_rss_channel():
    """Create the base RSS channel element with proper namespaces."""
    rss = Element('rss', version='2.0')
    rss.set('xmlns:atom', 'http://www.w3.org/2005/Atom')
    channel = SubElement(rss, 'channel')

    title = SubElement(channel, 'title')
    title.text = "Feed di Notizie UglyCitizen"

    link = SubElement(channel, 'link')
    link.text = "https://github.com/fabriziosalmi/UglyFeed"

    description = SubElement(channel, 'description')
    description.text = "UglyFeed"

    language = SubElement(channel, 'language')
    language.text = "it"

    atom_link = SubElement(channel, 'atom:link', {
        'href': 'https://raw.githubusercontent.com/fabriziosalmi/UglyFeed/main/examples/uglyfeed-source-1.xml',
        'rel': 'self',
        'type': 'application/rss+xml'
    })

    return rss, channel

def process_item(item):
    """Process individual JSON item to XML item element."""
    item_element = Element('item')

    item_title = SubElement(item_element, 'title')
    item_title.text = escape_xml_chars(item.get('title', 'Nessun Titolo'))

    item_description = SubElement(item_element, 'description')
    content = escape_xml_chars(item.get('content', 'Nessun Contenuto'))

    if 'links' in item:
        content += "<br/><br/><small><b>Fonti</b></small><br/><ul>"
        for link in item['links']:
            content += f'<li><small><a href="{link}" target="_blank">{link}</a></small></li>'
        content += "</ul>"

    api = item.get('api', 'Unknown API')
    model = item.get('model', 'Unknown Model')
    content += f'<br/><br/><small>Generated by <b>{escape_xml_chars(model)}</b> via <b>{escape_xml_chars(api.capitalize())}</b></small>'

    item_description.text = content

    try:
        processed_at = datetime.strptime(item.get('processed_at', datetime.now().isoformat()), '%Y-%m-%d %H:%M:%S')
    except ValueError:
        processed_at = datetime.now()

    pub_date = SubElement(item_element, 'pubDate')
    pub_date.text = processed_at.strftime('%a, %d %b %Y %H:%M:%S GMT')

    guid = SubElement(item_element, 'guid')
    guid.text = f"https://github.com/fabriziosalmi/UglyFeed/{urllib.parse.quote(item.get('title', 'Nessun Titolo'))}"

    return item_element

def create_rss_feed(json_data, output_path):
    """Create or update an RSS feed based on provided JSON data."""
    if os.path.exists(output_path):
        try:
            tree = parse(output_path)
            rss = tree.getroot()
            channel = rss.find('channel')
        except Exception as e:
            logging.error(f"Error parsing existing RSS file: {e}")
            return
    else:
        rss, channel = create_rss_channel()

    new_items = []
    cutoff_date = datetime.now() - timedelta(days=MAX_AGE_DAYS)
    for item in json_data:
        item_element = process_item(item)
        processed_at = datetime.strptime(item_element.find('pubDate').text, '%a, %d %b %Y %H:%M:%S GMT')

        if processed_at >= cutoff_date:
            new_items.append(item_element)

    existing_items = list(channel.findall('item'))
    all_items = existing_items + new_items
    all_items.sort(key=lambda x: datetime.strptime(x.find('pubDate').text, '%a, %d %b %Y %H:%M:%S GMT'), reverse=True)

    trimmed_items = all_items[:MAX_ITEMS]

    for item in channel.findall('item'):
        channel.remove(item)
    for item in trimmed_items:
        channel.append(item)

    try:
        tree = ElementTree(rss)
        tree.write(output_path, encoding='utf-8', xml_declaration=True)
        item_count = len(trimmed_items)
        logging.info(f"RSS feed successfully updated at {output_path}")
        logging.info(f"Total items in feed: {item_count}")
        # Print success message to standard output
        print(f"RSS feed successfully generated at {output_path}")
        print(f"Total items in feed: {item_count}")
    except IOError as e:
        logging.error(f"Error saving RSS feed to file {output_path}: {e}")

def main():
    """Main function to read JSON files and create/update the RSS feed."""
    parser = argparse.ArgumentParser(description='Process JSON to RSS.')
    parser.add_argument('--config', type=str, default='config.yaml', help='Path to the configuration file')
    parser.add_argument('--max_items', type=int, help='Override maximum number of items in the RSS feed')
    parser.add_argument('--max_age_days', type=int, help='Override maximum age of items in days')
    args = parser.parse_args()

    global config
    config = load_config(args.config)

    global MAX_ITEMS
    global MAX_AGE_DAYS
    MAX_ITEMS = config.get('max_items', 50)
    MAX_AGE_DAYS = config.get('max_age_days', 30)

    # Override config values with environment variables if present
    MAX_ITEMS = int(os.getenv('MAX_ITEMS', MAX_ITEMS))
    MAX_AGE_DAYS = int(os.getenv('MAX_AGE_DAYS', MAX_AGE_DAYS))

    # Override config values if command-line arguments are provided
    if args.max_items is not None:
        MAX_ITEMS = args.max_items

    if args.max_age_days is not None:
        MAX_AGE_DAYS = args.max_age_days

    logging.info(f"Configuration: MAX_ITEMS={MAX_ITEMS}, MAX_AGE_DAYS={MAX_AGE_DAYS}")

    rewritten_dir = 'rewritten'
    output_path = os.path.join('uglyfeeds', 'uglyfeed.xml')

    os.makedirs('uglyfeeds', exist_ok=True)

    json_data = read_json_files(rewritten_dir)

    if json_data:
        create_rss_feed(json_data, output_path)
    else:
        logging.info('No JSON files found in the rewritten directory.')

if __name__ == '__main__':
    main()
