name: Publish to PyPI

on:
  push:
    branches:
      - main  # Adjust to the branches you want to trigger releases
    paths:
      - 'setup.py'          # Trigger on changes to setup.py
      - 'requirements.txt'  # Trigger on changes to requirements.txt (optional)
      - 'config.py'         # Trigger on changes to config.py (if it impacts the release)
      - 'dist/*'            # Trigger if the distribution files are changed (optional)
  workflow_dispatch:

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.9'  # Use the Python version you are targeting

      - name: Install dependencies
        run: pip install setuptools wheel twine

      - name: Extract version number from setup.py
        id: get_version
        run: |
          VERSION=$(python -c "import ast; from pathlib import Path; setup_ast = ast.parse(Path('setup.py').read_text()); version = next(node.value.s for node in ast.walk(setup_ast) if isinstance(node, ast.keyword) and node.arg == 'version'); print(version)")
          echo "VERSION=${VERSION}" >> $GITHUB_ENV

      - name: Build package
        run: python setup.py sdist bdist_wheel

      - name: List changed files
        id: list_changed_files
        run: |
          git diff --name-only HEAD~1 > changed_files.txt || echo "setup.py" > changed_files.txt
          cat changed_files.txt
          echo "CHANGED_FILES=$(cat changed_files.txt | tr '\n' ' ')" >> $GITHUB_ENV

      - name: Check if important files were changed
        run: |
          if grep -E 'setup.py|requirements.txt|config.py' changed_files.txt; then
            echo "IMPORTANT_FILES_CHANGED=true" >> $GITHUB_ENV
          else
            echo "IMPORTANT_FILES_CHANGED=false" >> $GITHUB_ENV

      - name: Publish package to PyPI
        if: env.IMPORTANT_FILES_CHANGED == 'true'
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
        run: |
          twine upload dist/*

      - name: Create GitHub Release
        if: env.IMPORTANT_FILES_CHANGED == 'true'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
        with:
          tag_name: v${{ env.VERSION }}  # Use the version from setup.py
          release_name: Release ${{ env.VERSION }}
          body: |
            ## Changes in this Release
            - Automatically generated release based on the following commit: ${{ github.sha }}
            - Commit message: ${{ github.event.head_commit.message }}
          draft: false
          prerelease: false

      - name: Upload Release Asset (Optional)
        if: |
          steps.create_release.outputs.upload_url != ''
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist/*.whl
          asset_name: uglypy-${{ env.VERSION }}.whl
          asset_content_type: application/zip
