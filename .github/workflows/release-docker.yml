name: Docker Build and Deploy

on:
  push:
    branches:
      - main
    paths:
      - 'setup.py'          # Trigger on changes to setup.py
      - 'requirements.txt'  # Trigger on changes to requirements.txt
      - 'config.py'         # Trigger on changes to config.py
      - 'Dockerfile'        # Trigger on changes to Dockerfile
      - '.github/workflows/docker-build-deploy.yml'  # Trigger on changes to this workflow
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Extract version number from setup.py
        id: get_version
        run: |
          VERSION=$(python -c "import ast; from pathlib import Path; setup_ast = ast.parse(Path('setup.py').read_text()); version = next(node.value.s for node in ast.walk(setup_ast) if isinstance(node, ast.keyword) and node.arg == 'version'); print(version)")
          echo "VERSION=${VERSION}" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        run: |
          docker build -t fabriziosalmi/uglyfeed:${{ env.VERSION }} .
          docker tag fabriziosalmi/uglyfeed:${{ env.VERSION }} fabriziosalmi/uglyfeed:latest
          docker push fabriziosalmi/uglyfeed:${{ env.VERSION }}
          docker push fabriziosalmi/uglyfeed:latest

      - name: Create GitHub Release
        if: |
          github.event_name == 'push' &&
          github.ref == 'refs/heads/main' &&
          !contains(github.event.head_commit.message, 'pylint') &&
          !contains(github.event.head_commit.message, 'dependabot') &&
          !contains(github.event.head_commit.message, 'CodeQL') &&
          !contains(github.event.head_commit.message, 'chore') &&
          !contains(github.event.head_commit.message, 'ci')
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
        with:
          tag_name: v${{ env.VERSION }}  # Use the version from setup.py
          release_name: Release ${{ env.VERSION }}
          body: |
            ## Changes in this Release
            - Automatically generated release based on the following commit: ${{ github.sha }}
            - Commit message: ${{ github.event.head_commit.message }}
          draft: false
          prerelease: false

      - name: Upload Release Asset (Optional)
        if: |
          steps.create_release.outputs.upload_url != '' &&
          !contains(github.event.head_commit.message, 'pylint') &&
          !contains(github.event.head_commit.message, 'dependabot') &&
          !contains(github.event.head_commit.message, 'CodeQL') &&
          !contains(github.event.head_commit.message, 'chore') &&
          !contains(github.event.head_commit.message, 'ci')
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist/*.whl
          asset_name: uglypy-${{ env.VERSION }}.whl
          asset_content_type: application/zip
